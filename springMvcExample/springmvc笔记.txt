springMvc框架搭建步骤：
(1)创建一个maven工程：maven-archetype-webapp模板创建
(2)导入如下Maven依赖:
      <dependencies>
        <dependency>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
          <version>4.11</version>
          <scope>test</scope>
        </dependency>
        <!--Spring相关依赖-->
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-context</artifactId>
          <version>5.3.4</version>
        </dependency>
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-web</artifactId>
          <version>5.3.4</version>
        </dependency>
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-webmvc</artifactId>
          <version>5.3.4</version>
        </dependency>
        <!--Servlet相关依赖-->
        <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>servlet-api</artifactId>
          <version>2.5</version>
          <scope>provided</scope>
        </dependency>
        <!--jsp相关依赖-->
        <dependency>
          <groupId>javax.servlet.jsp</groupId>
          <artifactId>jsp-api</artifactId>
          <version>2.1</version>
          <scope>provided</scope>
        </dependency>
      </dependencies>

(3)配置web.xml
     <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
              version="4.0">

       <!-- 配置编码过滤器，防止乱码 -->
       <filter>
         <filter-name>encodingFilter</filter-name>
         <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
         <!--支持异步处理-->
         <async-supported>true</async-supported>
         <!-- 配置encoding，告诉指定的编码格式，这里设置为UTF-8 -->
         <init-param>
           <param-name>encoding</param-name>
           <param-value>UTF-8</param-value>
         </init-param>
         <!-- 解决请求乱码 -->
         <init-param>
           <param-name>forceRequestEncoding</param-name>
           <param-value>true</param-value>
         </init-param>
         <!-- 解决响应乱码 -->
         <init-param>
           <param-name>forceResponseEncoding</param-name>
           <param-value>true</param-value>
         </init-param>
       </filter>
       <filter-mapping>
         <filter-name>encodingFilter</filter-name>
         <url-pattern>/*</url-pattern>
       </filter-mapping>

       <!-- 配置SpringMVC核心控制器 -->
       <servlet>
         <servlet-name>springmvc</servlet-name>
         <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

         <!-- 配置DispatcherServlet的初始化参数：读取springmvc.xml -->
         <init-param>
           <param-name>contextConfigLocation</param-name>
           <param-value>classpath:spring-mvc.xml</param-value>
         </init-param>
         <!-- servlet启动时加载 -->
         <load-on-startup>1</load-on-startup>
         <!--支持异步处理-->
         <async-supported>true</async-supported>
       </servlet>

       <servlet-mapping>
         <servlet-name>springmvc</servlet-name>
         <!--
         /* 匹配所有资源（永远不要这样写）
         /  匹配所有请求（推荐）
         *.扩展名  匹配所有请求（推荐），例如*.do
         -->
         <url-pattern>/</url-pattern>
       </servlet-mapping>
     </web-app>
(4)在resources目录下创建spring-mvc.xml，将下面复制进去
    <?xml version="1.0" encoding="UTF-8"?>
    <beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:mvc="http://www.springframework.org/schema/mvc"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        https://www.springframework.org/schema/mvc/spring-mvc.xsd">

        <!-- 扫描指定包下的注解 -->
        <context:component-scan base-package="com.qin.controller"/>

        <!-- 配置注解驱动，它的主要的作用是：注册映射器HandlerMapping和适配器HandlerAdapter 两个类型的Bean -->
        <!--HandlerMapping的实现为实现类RequestMappingHandlerMapping，它会处理 @RequestMapping 注解，并将其注册到请求映射表中-->
        <!--HandlerAdapter的实现为实现类RequestMappingHandlerAdapter，它是处理请求的适配器，确定调用哪个类的哪个方法，并且构造方法参数，返回值 -->
        <!--在使用SpringMVC是一般都会加上该配置 -->
        <mvc:annotation-driven/>

        <!-- 注册视图解析器 -->
        <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
            <!-- 配置前缀 -->
            <property name="prefix" value="/WEB-INF/pages/"/>
            <!-- 配置后缀 -->
            <property name="suffix" value=".jsp"/>
         </bean>
    </beans>
(5)在src/main新建目录java以及resources并mark directory as对应的目录类别
(6)配置并启动tomcat


默认的静态资源路径为：
(1)
(2)
(3)
(4)
